
services:
  # postgres:
  #   image: postgres
  #   hostname: postgres
  #   ports:
  #     - "5432:5432"
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: postgres
  #     POSTGRES_DB: go-micro-example-db
  #   volumes:
  #     - ./.pg-vol:/var/lib/postgresql/data


  # db-backend:
  #   build:
  #     context: ./db-backend  
  #     dockerfile: Dockerfile  
  #   ports:
  #     - "8080:8080"  
  #   depends_on:
  #     - postgres
  #     - kafka

  letter-checker:
    build:
      context: ./letter-checker
      dockerfile: Dockerfile  
    ports:
      - "8083:8080"  
    depends_on:
      - mongo



  mongo:
    image: mongo:latest 
    container_name: mongo  
    ports:
      - "27017:27017"  
    volumes:
      - ./.mongo_data:/data/db  
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo  
      MONGO_INITDB_ROOT_PASSWORD: mongo  

  # html-parser:
  #   build:
  #     context: ./html-parser  
  #     dockerfile: Dockerfile 
  #   depends_on:
  #     - kafka


  # ai-shortener:
  #   build:
  #     context: ./ai-shortener 
  #     dockerfile: Dockerfile 
  #   restart: always
  #   depends_on:
  #     - kafka
    

  # zookeeper:
  #   image: wurstmeister/zookeeper:latest
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #   ports:
  #     - "2181:2181"
  #   tmpfs: "/datalog"


  # kafka:
  #   image: wurstmeister/kafka:latest
  #   container_name: makafka
  #   restart: always
  #   environment:
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,LISTENER_DOCKER_INTERNAL://makafka:9093
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,LISTENER_DOCKER_INTERNAL:PLAINTEXT
  #     KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,LISTENER_DOCKER_INTERNAL://0.0.0.0:9093
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_ADVERTISED_HOST_NAME: makafka
  #     KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
  #     KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #   ports:
  #     - "9092:9092"
  #     - "9093:9093"  # Они могут быть также проброшены внешне, если необходимо
  #   volumes:
  #     - ./.kafka-data:/var/lib/kafka/data
  #   depends_on:
  #     - zookeeper





    
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"      
    volumes:
      - ./.grafana-storage:/var/lib/grafana 
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin 